generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  storeCashiers StoreCashier[]
  shifts        Shift[] // Добавлена связь со сменами
}

enum UserRole {
  USER
  ADMIN
  CASHIER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String            @id @default(uuid())
  name            String
  purchasePrice   Float
  salePrice       Float
  imageUrl        String?
  quantity        Int
  createdAt       DateTime          @default(now())
  storeProducts   StoreProduct[]
  transactionItems TransactionItem[] // Добавлена связь с товарами в транзакциях
}

model Store {
  id        String         @id @default(uuid())
  name      String
  address   String
  cashiers  StoreCashier[]
  products  StoreProduct[]
  createdAt DateTime       @default(now())
  shifts    Shift[] // Добавлена связь со сменами
}

model StoreCashier {
  id         String @id @default(uuid())
  store      Store  @relation(fields: [storeId], references: [id], onDelete: Cascade) // <-- ИЗМЕНЕНО
  storeId    String
  cashier    User   @relation(fields: [cashierId], references: [id], onDelete: Cascade) // <-- ИЗМЕНЕНО
  cashierId  String
  assignedBy String

  @@unique([storeId, cashierId])
}

model StoreProduct {
  id        String  @id @default(uuid())
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade) // <-- ИЗМЕНЕНО
  storeId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // <-- ИЗМЕНЕНО
  productId String

  @@unique([storeId, productId])
}

// НОВАЯ МОДЕЛЬ: Смена
model Shift {
  id           String        @id @default(uuid())
  cashierId    String
  cashier      User          @relation(fields: [cashierId], references: [id])
  storeId      String
  store        Store         @relation(fields: [storeId], references: [id])
  openedAt     DateTime      @default(now())
  closedAt     DateTime?
  transactions Transaction[]
}

// НОВАЯ МОДЕЛЬ: Транзакция
model Transaction {
  id            String            @id @default(uuid())
  shiftId       String
  shift         Shift             @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  total         Float
  paymentMethod String // "card" или "qr"
  createdAt     DateTime          @default(now())
  items         TransactionItem[]
}

// НОВАЯ МОДЕЛЬ: Товары в транзакции
model TransactionItem {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
  priceAtSale   Float // Цена на момент продажи

  @@unique([transactionId, productId])
}
